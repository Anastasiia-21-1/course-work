generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  emailVerified DateTime?
  image         String?
  first_name    String    @default("User")
  last_name     String    @default("User")
  email         String    @unique
  password      String?

  // Relations
  accounts      Account[]
  sessions      Session[]
  losts         Lost[]
  finds         Find[]

  @@map("users")
}

model Account {
  id                       String  @id @default(cuid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token            String?
  expires_at              BigInt?
  token_type             String?
  scope                   String?
  id_token               String?
  session_state          String?
  oauth_token_secret     String?
  oauth_token            String?
  refresh_token_expires_in Int?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime?

  @@id([identifier, token])
  @@map("verification_tokens")
}

model City {
  id    Int     @id @default(autoincrement())
  name  String  @unique

  // Relations
  losts Lost[]
  finds Find[]

  @@map("City")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  icon String?

  // Relations
  losts Lost[]
  finds Find[]

  @@map("category")
}

model Lost {
  id          String   @id @default(cuid())
  title       String?
  description String?
  photo       String?
  time        String?
  location    String?

  // Relations
  user_id     String?
  user        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  city_id     Int?
  city        City?    @relation(fields: [city_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  
  category_id Int?
  category    Category? @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: Restrict)

  @@map("losts")
}

model Find {
  id          String   @id @default(cuid())
  title       String?
  description String?
  photo       String?
  time        String?
  location    String?

  // Relations
  user_id     String?
  user        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  city_id     Int?
  city        City?    @relation(fields: [city_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  
  category_id Int?
  category    Category? @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: Restrict)

  @@map("finds")
} 