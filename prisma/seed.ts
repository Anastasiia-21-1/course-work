import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

function range(n: number): number[] {
  return Array.from({ length: n }, (_, i) => i);
}

function isoRecentDaysAgo(daysAgo: number): string {
  const d = new Date();
  d.setDate(d.getDate() - daysAgo);
  return d.toISOString();
}

async function main() {
  console.log('üå± –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

  console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è –Ω–∞—è–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö...');
  await prisma.find.deleteMany();
  await prisma.lost.deleteMany();
  await prisma.user.deleteMany();
  await prisma.category.deleteMany();
  await prisma.city.deleteMany();

  console.log('üèôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—Ç...');
  const cityNames = [
    '–ö–∏—ó–≤',
    '–õ—å–≤—ñ–≤',
    '–•–∞—Ä–∫—ñ–≤',
    '–û–¥–µ—Å–∞',
    '–î–Ω—ñ–ø—Ä–æ',
    '–ó–∞–ø–æ—Ä—ñ–∂–∂—è',
    '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫',
    '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å',
    '–†—ñ–≤–Ω–µ',
    '–õ—É—Ü—å–∫',
    '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ',
    '–£–∂–≥–æ—Ä–æ–¥',
    '–ß–µ—Ä–∫–∞—Å–∏',
    '–ü–æ–ª—Ç–∞–≤–∞',
    '–ß–µ—Ä–Ω—ñ–≥—ñ–≤',
    '–°—É–º–∏',
    '–í—ñ–Ω–Ω–∏—Ü—è',
    '–ñ–∏—Ç–æ–º–∏—Ä',
    '–ú–∏–∫–æ–ª–∞—ó–≤',
    '–•–µ—Ä—Å–æ–Ω',
    '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π',
  ];

  const createdCities = await Promise.all(
    cityNames.map((name) => prisma.city.create({ data: { name } })),
  );

  console.log('üìÇ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...');
  const categories = [
    { name: '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞', icon: 'üì±' },
    { name: '–û–¥—è–≥', icon: 'üëï' },
    { name: '–î–æ–∫—É–º–µ–Ω—Ç–∏', icon: 'üìÑ' },
    { name: '–ö–ª—é—á—ñ', icon: 'üîë' },
    { name: '–ì–∞–º–∞–Ω–µ—Ü—å', icon: 'üëõ' },
    { name: '–¢–µ–ª–µ—Ñ–æ–Ω', icon: 'üìû' },
    { name: '–ö–Ω–∏–≥–∏', icon: 'üìö' },
    { name: '–ê–∫—Å–µ—Å—É–∞—Ä–∏', icon: 'üéí' },
    { name: '–Æ–≤–µ–ª—ñ—Ä–Ω—ñ –≤–∏—Ä–æ–±–∏', icon: 'üíç' },
    { name: '–°–ø–æ—Ä—Ç', icon: 'üèÄ' },
    { name: '–î–æ–º–∞—à–Ω—ñ —Ç–≤–∞—Ä–∏–Ω–∏', icon: 'üê∂' },
    { name: '–Ü–Ω—à–µ', icon: '‚ùì' },
  ];

  const createdCategories = await Promise.all(
    categories.map((cat) => prisma.category.create({ data: cat })),
  );

  console.log('üë• –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –≤—ñ–¥–æ–º–∏–º–∏ –æ–±–ª—ñ–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏...');
  const basePassword = 'password123';
  const hashedPassword = await bcrypt.hash(basePassword, 10);

  const knownUsersData = [
    { first_name: '–û–ª–µ–Ω–∞', last_name: '–Ü–≤–∞–Ω–µ–Ω–∫–æ', email: 'olena@example.com' },
    { first_name: '–Ü–≥–æ—Ä', last_name: '–ü–µ—Ç—Ä–µ–Ω–∫–æ', email: 'ihor@example.com' },
    { first_name: '–ú–∞—Ä—ñ—è', last_name: '–®–µ–≤—á–µ–Ω–∫–æ', email: 'maria@example.com' },
    { first_name: '–ê–Ω–¥—Ä—ñ–π', last_name: '–ö–æ–≤–∞–ª—å', email: 'andrii@example.com' },
    { first_name: '–ù–∞—Ç–∞–ª—ñ—è', last_name: '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ', email: 'nataliia@example.com' },
    { first_name: '–°–µ—Ä–≥—ñ–π', last_name: '–ú–µ–ª—å–Ω–∏–∫', email: 'serhii@example.com' },
    { first_name: '–ö–∞—Ç–µ—Ä–∏–Ω–∞', last_name: '–°–∏–¥–æ—Ä–µ–Ω–∫–æ', email: 'kateryna@example.com' },
    { first_name: '–†–æ—Å—Ç–∏—Å–ª–∞–≤', last_name: '–ì—Ä–∏—Ü–µ–Ω–∫–æ', email: 'rostyslav@example.com' },
    { first_name: '–Æ—Ä—ñ–π', last_name: '–¢–∫–∞—á–µ–Ω–∫–æ', email: 'yurii@example.com' },
    { first_name: '–Ü–Ω–Ω–∞', last_name: '–ö—Ä–∞–≤—á–µ–Ω–∫–æ', email: 'inna@example.com' },
  ];

  const createdUsers = await Promise.all(
    knownUsersData.map((u) =>
      prisma.user.create({
        data: {
          email: u.email,
          password: hashedPassword,
          first_name: u.first_name,
          last_name: u.last_name,
          name: `${u.first_name} ${u.last_name}`,
          image: null,
        },
      }),
    ),
  );

  const extraNames: Array<[string, string]> = [
    ['–ë–æ–≥–¥–∞–Ω', '–†–æ–º–∞–Ω—é–∫'],
    ['–û–∫—Å–∞–Ω–∞', '–î–æ—Ä–æ—à–µ–Ω–∫–æ'],
    ['–í–æ–ª–æ–¥–∏–º–∏—Ä', '–ú–∞—Ä—á—É–∫'],
    ['–Ü—Ä–∏–Ω–∞', '–õ–µ–≤—á–µ–Ω–∫–æ'],
    ['–ú–∏–∫–æ–ª–∞', '–°–∞–≤—á–µ–Ω–∫–æ'],
    ['–¢–µ—Ç—è–Ω–∞', '–ó—ñ–Ω—á–µ–Ω–∫–æ'],
    ['–ê—Ä—Ç–µ–º', '–ü–æ–ª—ñ—â—É–∫'],
    ['–î–∞—Ä–∏–Ω–∞', '–ì–∞–≤—Ä–∏–ª—é–∫'],
    ['–í–∞—Å–∏–ª—å', '–ö–ª–∏–º–µ–Ω–∫–æ'],
    ['–õ—ñ–ª—ñ—è', '–î–∞–Ω–∏–ª—é–∫'],
    ['–ü–∞–≤–ª–æ', '–°–µ–º–µ–Ω—é–∫'],
    ['–û–ª—å–≥–∞', '–†—É–¥–µ–Ω–∫–æ'],
    ['–†–æ–º–∞–Ω', '–ö—Ä–∞–≤–µ—Ü—å'],
    ['–•—Ä–∏—Å—Ç–∏–Ω–∞', '–ú–µ–ª—å–Ω–∏—á—É–∫'],
    ['–°–≤—ñ—Ç–ª–∞–Ω–∞', '–û—Å—Ç–∞–ø—á—É–∫'],
    ['–Ñ–≤–≥–µ–Ω', '–õ–∏—Å–µ–Ω–∫–æ'],
    ['–ú–∞–∫—Å–∏–º', '–ë—ñ–ª–∏–∫'],
    ['–Æ–ª—ñ—è', '–¢–∏–º–æ—â—É–∫'],
    ['–ê–Ω–Ω–∞', '–§–µ–¥–æ—Ä—á—É–∫'],
    ['–°—Ç–µ–ø–∞–Ω', '–ö–æ–≤–∞–ª—å—á—É–∫'],
  ];

  const extraUsers = await Promise.all(
    extraNames.map(([fn, ln], idx) =>
      prisma.user.create({
        data: {
          email: `user${idx + 1}@example.com`,
          password: hashedPassword,
          first_name: fn,
          last_name: ln,
          name: `${fn} ${ln}`,
          image: null,
        },
      }),
    ),
  );

  const users = [...createdUsers, ...extraUsers];

  console.log('üîé –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω—å...');
  const productTitles = [
    '–°–º–∞—Ä—Ç—Ñ–æ–Ω iPhone 13 —á–æ—Ä–Ω–∏–π',
    '–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy S21',
    '–ù–∞–≤—É—à–Ω–∏–∫–∏ AirPods Pro',
    '–ü–ª–∞–Ω—à–µ—Ç iPad Air 64GB',
    '–ù–æ—É—Ç–±—É–∫ Lenovo ThinkPad X1',
    '–§–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç Canon EOS 250D',
    '–ì–∞–º–∞–Ω–µ—Ü—å —à–∫—ñ—Ä—è–Ω–∏–π –∫–æ—Ä–∏—á–Ω–µ–≤–∏–π',
    '–ü–æ—Ä—Ç–º–æ–Ω–µ —á–æ—Ä–Ω–µ –∑ –±–ª–∏—Å–∫–∞–≤–∫–æ—é',
    '–ó–≤‚Äô—è–∑–∫–∞ –∫–ª—é—á—ñ–≤ –∑ –±—Ä–µ–ª–æ–∫–æ–º —Ç—Ä–∏–∑—É–±',
    '–î–æ–∫—É–º–µ–Ω—Ç–∏: –ø–∞—Å–ø–æ—Ä—Ç –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω–∞',
    '–ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è —É —á–æ—Ö–ª—ñ',
    '–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π –∫–≤–∏—Ç–æ–∫ –ù–£ ¬´–õ–ü¬ª',
    '–ö–Ω–∏–≥–∞ ¬´–ö–æ–±–∑–∞—Ä¬ª –¢. –®–µ–≤—á–µ–Ω–∫–∞',
    '–ö–Ω–∏–≥–∞ ¬´–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ –≤—ñ–π–Ω–∏¬ª',
    '–†—é–∫–∑–∞–∫ —Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∏–π Deuter',
    '–ü–∞—Ä–∞—Å–æ–ª—å–∫–∞ —Å–∫–ª–∞–¥–Ω–∞ —Å–∏–Ω—è',
    '–û–∫—É–ª—è—Ä–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –≤ —Ñ—É—Ç–ª—è—Ä—ñ',
    '–ö–ª—é—á—ñ –≤—ñ–¥ –∞–≤—Ç–æ Toyota',
    '–§—ñ—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç Xiaomi Mi Band',
    '–ì–æ–¥–∏–Ω–Ω–∏–∫ Casio —á–æ—Ä–Ω–∏–π',
  ];

  const descriptions = [
    '–ó–∞–≥—É–±–ª–µ–Ω–æ –ø—ñ–¥ —á–∞—Å –ø–æ—ó–∑–¥–∫–∏ –≥—Ä–æ–º–∞–¥—Å—å–∫–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º. –î—É–∂–µ –ø—Ä–æ—à—É –ø–æ–≤–µ—Ä–Ω—É—Ç–∏, —î –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞.',
    '–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∑—É–ø–∏–Ω—Ü—ñ –±—ñ–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É. –û–ø–∏—à—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏.',
    '–ô–º–æ–≤—ñ—Ä–Ω–æ –∑–∞–ª–∏—à–µ–Ω–æ –≤ –∫–∞–≤‚Äô—è—Ä–Ω—ñ. –í–∞–∂–ª–∏–≤—ñ –¥–∞–Ω—ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ.',
    '–Ñ –ø–æ–¥—Ä—è–ø–∏–Ω–∞ –Ω–∞ –∫–æ—Ä–ø—É—Å—ñ. –ú–∞—î –∑–∞—Ö–∏—Å–Ω–µ —Å–∫–ª–æ.',
    '–£—Å–µ—Ä–µ–¥–∏–Ω—ñ –¥–µ–∫—ñ–ª—å–∫–∞ –∫–∞—Ä—Ç–æ–∫ —Ç–∞ –≥–æ—Ç—ñ–≤–∫–∞. –î–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–∞ –º–æ—î —ñ–º‚Äô—è.',
    '–ü–æ–±–ª–∏–∑—É –ø–∞—Ä–∫—É –®–µ–≤—á–µ–Ω–∫–∞. –ß–µ–∫–∞—é –≤–ª–∞—Å–Ω–∏–∫–∞.',
    '–í—Ç—Ä–∞—Ç–∞ —Å—Ç–∞–ª–∞—Å—è –±–ª–∏–∑—å–∫–æ 18:30. –ú–æ–∂–ª–∏–≤–∏–π —Ä–∞–π–æ–Ω ‚Äî —Ü–µ–Ω—Ç—Ä.',
    '–£ –∫–æ–º–ø–ª–µ–∫—Ç—ñ –∑–∞—Ä—è–¥–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π —Ç–∞ –∫–∞–±–µ–ª—å.',
    '–ö–æ–ª—ñ—Ä —á–æ—Ä–Ω–∏–π, –±–µ–∑ —á–æ—Ö–ª–∞. –ï–∫—Ä–∞–Ω —Ü—ñ–ª–∏–π.',
    '–Ñ —ñ–º–µ–Ω–Ω–∏–π –Ω–∞–ø–∏—Å –Ω–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–æ—Ä–æ–Ω—ñ.',
  ];

  const locations = [
    '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 22',
    '–ø–ª. –†–∏–Ω–æ–∫, 1',
    '–ø—Ä–æ—Å–ø. –ù–∞—É–∫–∏, 17',
    '–≤—É–ª. –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞, 5',
    '–ø—Ä–æ—Å–ø. –î–º–∏—Ç—Ä–∞ –Ø–≤–æ—Ä–Ω–∏—Ü—å–∫–æ–≥–æ, 64',
    '–≤—É–ª. –°–æ–±–æ—Ä–Ω–∞, 10',
    '–≤—É–ª. –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, 45',
    '–≤—É–ª. –ó–∞–º–∫–æ–≤–∞, 3',
    '–≤—É–ª. –ì—Ä—É—à–µ–≤—Å—å–∫–æ–≥–æ, 12',
    '–≤—É–ª. –°–æ–±–æ—Ä–Ω–æ—Å—Ç—ñ, 8',
  ];

  const imageUrls = [
    'https://images.unsplash.com/photo-1510557880182-3d4d3cba35fb?q=80&w=1200&auto=format&fit=crop', // phone
    'https://images.unsplash.com/photo-1518447433716-1f48a82a1e7a?q=80&w=1200&auto=format&fit=crop', // headphones
    'https://images.unsplash.com/photo-1517336714731-489689fd1ca8?q=80&w=1200&auto=format&fit=crop', // laptop
    'https://images.unsplash.com/photo-1585366119957-e9730b6d0f3b?q=80&w=1200&auto=format&fit=crop', // wallet
    'https://images.unsplash.com/photo-1509099836639-18ba1795216d?q=80&w=1200&auto=format&fit=crop', // keys
    'https://images.unsplash.com/photo-1542393545-10f5cde2c810?q=80&w=1200&auto=format&fit=crop', // book
    'https://images.unsplash.com/photo-1520975916090-3105956dac38?q=80&w=1200&auto=format&fit=crop', // backpack
    'https://images.unsplash.com/photo-1518544801976-3e8a04f2eb35?q=80&w=1200&auto=format&fit=crop', // umbrella
    'https://images.unsplash.com/photo-1512374382149-233c42b6a83b?q=80&w=1200&auto=format&fit=crop', // glasses
    'https://images.unsplash.com/photo-1514894780887-121968d00567?q=80&w=1200&auto=format&fit=crop', // watch
  ];

  const timeOffsets = [1, 2, 3, 5, 7, 10, 14, 18, 21, 25];

  console.log('üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å (–≤—Ç—Ä–∞—Ç–∏/–∑–Ω–∞—Ö—ñ–¥–∫–∏)...');
  const targetLost = 120;
  const targetFind = 120;

  const pick = <T>(arr: T[], i: number) => arr[i % arr.length];

  const lostItems = await Promise.all(
    range(targetLost).map((i) => {
      const user = users[i % users.length];
      const city = createdCities[i % createdCities.length];
      const category = createdCategories[i % createdCategories.length];
      return prisma.lost.create({
        data: {
          title: `${pick(productTitles, i)} ‚Äî –≤—Ç—Ä–∞—á–µ–Ω–æ`,
          description: pick(descriptions, i + 3),
          photo: pick(imageUrls, i + 1),
          time: isoRecentDaysAgo(pick(timeOffsets, i)),
          location: pick(locations, i),
          user_id: user.id,
          city_id: city.id,
          category_id: category.id,
        },
      });
    }),
  );

  const foundItems = await Promise.all(
    range(targetFind).map((i) => {
      const user = users[(i + 3) % users.length];
      const city = createdCities[(i + 5) % createdCities.length];
      const category = createdCategories[(i + 7) % createdCategories.length];
      return prisma.find.create({
        data: {
          title: `${pick(productTitles, i)} ‚Äî –∑–Ω–∞–π–¥–µ–Ω–æ`,
          description: pick(descriptions, i + 1),
          photo: pick(imageUrls, i + 2),
          time: isoRecentDaysAgo(pick(timeOffsets, i + 1)),
          location: pick(locations, i + 2),
          user_id: user.id,
          city_id: city.id,
          category_id: category.id,
        },
      });
    }),
  );

  console.log('üéâ –ù–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log(`–ú—ñ—Å—Ç–∞: ${createdCities.length}`);
  console.log(`–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${createdCategories.length}`);
  console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${users.length}`);
  console.log(`–í—Ç—Ä–∞—Ç–∏: ${lostItems.length}`);
  console.log(`–ó–Ω–∞—Ö—ñ–¥–∫–∏: ${foundItems.length}`);
  console.log('–û–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ (–¥–ª—è –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ email/–ø–∞—Ä–æ–ª—å):');
  console.table(knownUsersData.map((u) => ({ Email: u.email, Password: basePassword })));
}

main()
  .catch((e) => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
