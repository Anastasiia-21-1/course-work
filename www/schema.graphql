schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""Cities for founds"""
type City {
  id: Int!
  name: String!
}

"""
aggregated selection of "City"
"""
type City_aggregate {
  aggregate: City_aggregate_fields
  nodes: [City!]!
}

"""
aggregate fields of "City"
"""
type City_aggregate_fields {
  avg: City_avg_fields
  count(columns: [City_select_column!], distinct: Boolean): Int!
  max: City_max_fields
  min: City_min_fields
  stddev: City_stddev_fields
  stddev_pop: City_stddev_pop_fields
  stddev_samp: City_stddev_samp_fields
  sum: City_sum_fields
  var_pop: City_var_pop_fields
  var_samp: City_var_samp_fields
  variance: City_variance_fields
}

"""aggregate avg on columns"""
type City_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "City". All fields are combined with a logical 'AND'.
"""
input City_bool_exp {
  _and: [City_bool_exp!]
  _not: City_bool_exp
  _or: [City_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "City"
"""
enum City_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  City_name_key

  """
  unique or primary key constraint on columns "id"
  """
  City_pkey
}

"""
input type for incrementing numeric columns in table "City"
"""
input City_inc_input {
  id: Int
}

"""
input type for inserting data into table "City"
"""
input City_insert_input {
  id: Int
  name: String
}

"""aggregate max on columns"""
type City_max_fields {
  id: Int
  name: String
}

"""aggregate min on columns"""
type City_min_fields {
  id: Int
  name: String
}

"""
response of any mutation on the table "City"
"""
type City_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [City!]!
}

"""
on_conflict condition type for table "City"
"""
input City_on_conflict {
  constraint: City_constraint!
  update_columns: [City_update_column!]! = []
  where: City_bool_exp
}

"""Ordering options when selecting data from "City"."""
input City_order_by {
  id: order_by
  name: order_by
}

"""primary key columns input for table: City"""
input City_pk_columns_input {
  id: Int!
}

"""
select columns of table "City"
"""
enum City_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "City"
"""
input City_set_input {
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type City_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type City_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type City_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "City"
"""
input City_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: City_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input City_stream_cursor_value_input {
  id: Int
  name: String
}

"""aggregate sum on columns"""
type City_sum_fields {
  id: Int
}

"""
update columns of table "City"
"""
enum City_update_column {
  """column name"""
  id

  """column name"""
  name
}

input City_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: City_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: City_set_input

  """filter the rows which have to be updated"""
  where: City_bool_exp!
}

"""aggregate var_pop on columns"""
type City_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type City_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type City_variance_fields {
  id: Float
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""Category of found"""
type category {
  icon: String
  id: Int!
  name: String!
}

"""
aggregated selection of "category"
"""
type category_aggregate {
  aggregate: category_aggregate_fields
  nodes: [category!]!
}

"""
aggregate fields of "category"
"""
type category_aggregate_fields {
  avg: category_avg_fields
  count(columns: [category_select_column!], distinct: Boolean): Int!
  max: category_max_fields
  min: category_min_fields
  stddev: category_stddev_fields
  stddev_pop: category_stddev_pop_fields
  stddev_samp: category_stddev_samp_fields
  sum: category_sum_fields
  var_pop: category_var_pop_fields
  var_samp: category_var_samp_fields
  variance: category_variance_fields
}

"""aggregate avg on columns"""
type category_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "category". All fields are combined with a logical 'AND'.
"""
input category_bool_exp {
  _and: [category_bool_exp!]
  _not: category_bool_exp
  _or: [category_bool_exp!]
  icon: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "category"
"""
enum category_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  category_name_key

  """
  unique or primary key constraint on columns "id"
  """
  category_pkey
}

"""
input type for incrementing numeric columns in table "category"
"""
input category_inc_input {
  id: Int
}

"""
input type for inserting data into table "category"
"""
input category_insert_input {
  icon: String
  id: Int
  name: String
}

"""aggregate max on columns"""
type category_max_fields {
  icon: String
  id: Int
  name: String
}

"""aggregate min on columns"""
type category_min_fields {
  icon: String
  id: Int
  name: String
}

"""
response of any mutation on the table "category"
"""
type category_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [category!]!
}

"""
on_conflict condition type for table "category"
"""
input category_on_conflict {
  constraint: category_constraint!
  update_columns: [category_update_column!]! = []
  where: category_bool_exp
}

"""Ordering options when selecting data from "category"."""
input category_order_by {
  icon: order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: category"""
input category_pk_columns_input {
  id: Int!
}

"""
select columns of table "category"
"""
enum category_select_column {
  """column name"""
  icon

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "category"
"""
input category_set_input {
  icon: String
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type category_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type category_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type category_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "category"
"""
input category_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: category_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input category_stream_cursor_value_input {
  icon: String
  id: Int
  name: String
}

"""aggregate sum on columns"""
type category_sum_fields {
  id: Int
}

"""
update columns of table "category"
"""
enum category_update_column {
  """column name"""
  icon

  """column name"""
  id

  """column name"""
  name
}

input category_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: category_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: category_set_input

  """filter the rows which have to be updated"""
  where: category_bool_exp!
}

"""aggregate var_pop on columns"""
type category_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type category_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type category_variance_fields {
  id: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "finds"
"""
type finds {
  created_at: timestamptz!
  description: String
  id: Int!
  location: String
  photo: String
  time: String
  title: String!
  updated_at: timestamptz!
  user_id: Int!
}

"""
aggregated selection of "finds"
"""
type finds_aggregate {
  aggregate: finds_aggregate_fields
  nodes: [finds!]!
}

"""
aggregate fields of "finds"
"""
type finds_aggregate_fields {
  avg: finds_avg_fields
  count(columns: [finds_select_column!], distinct: Boolean): Int!
  max: finds_max_fields
  min: finds_min_fields
  stddev: finds_stddev_fields
  stddev_pop: finds_stddev_pop_fields
  stddev_samp: finds_stddev_samp_fields
  sum: finds_sum_fields
  var_pop: finds_var_pop_fields
  var_samp: finds_var_samp_fields
  variance: finds_variance_fields
}

"""aggregate avg on columns"""
type finds_avg_fields {
  id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "finds". All fields are combined with a logical 'AND'.
"""
input finds_bool_exp {
  _and: [finds_bool_exp!]
  _not: finds_bool_exp
  _or: [finds_bool_exp!]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  location: String_comparison_exp
  photo: String_comparison_exp
  time: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "finds"
"""
enum finds_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  finds_pkey
}

"""
input type for incrementing numeric columns in table "finds"
"""
input finds_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "finds"
"""
input finds_insert_input {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""aggregate max on columns"""
type finds_max_fields {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""aggregate min on columns"""
type finds_min_fields {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""
response of any mutation on the table "finds"
"""
type finds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [finds!]!
}

"""
on_conflict condition type for table "finds"
"""
input finds_on_conflict {
  constraint: finds_constraint!
  update_columns: [finds_update_column!]! = []
  where: finds_bool_exp
}

"""Ordering options when selecting data from "finds"."""
input finds_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  location: order_by
  photo: order_by
  time: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""primary key columns input for table: finds"""
input finds_pk_columns_input {
  id: Int!
}

"""
select columns of table "finds"
"""
enum finds_select_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  location

  """column name"""
  photo

  """column name"""
  time

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "finds"
"""
input finds_set_input {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""aggregate stddev on columns"""
type finds_stddev_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type finds_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type finds_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
Streaming cursor of the table "finds"
"""
input finds_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: finds_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input finds_stream_cursor_value_input {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""aggregate sum on columns"""
type finds_sum_fields {
  id: Int
  user_id: Int
}

"""
update columns of table "finds"
"""
enum finds_update_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  location

  """column name"""
  photo

  """column name"""
  time

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

input finds_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: finds_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: finds_set_input

  """filter the rows which have to be updated"""
  where: finds_bool_exp!
}

"""aggregate var_pop on columns"""
type finds_var_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type finds_var_samp_fields {
  id: Float
  user_id: Float
}

"""aggregate variance on columns"""
type finds_variance_fields {
  id: Float
  user_id: Float
}

"""
columns and relationships of "losts"
"""
type losts {
  created_at: timestamptz!
  description: String
  id: Int!
  location: String
  photo: String
  time: String
  title: String!
  updated_at: timestamptz!
  user_id: Int!
}

"""
aggregated selection of "losts"
"""
type losts_aggregate {
  aggregate: losts_aggregate_fields
  nodes: [losts!]!
}

"""
aggregate fields of "losts"
"""
type losts_aggregate_fields {
  avg: losts_avg_fields
  count(columns: [losts_select_column!], distinct: Boolean): Int!
  max: losts_max_fields
  min: losts_min_fields
  stddev: losts_stddev_fields
  stddev_pop: losts_stddev_pop_fields
  stddev_samp: losts_stddev_samp_fields
  sum: losts_sum_fields
  var_pop: losts_var_pop_fields
  var_samp: losts_var_samp_fields
  variance: losts_variance_fields
}

"""aggregate avg on columns"""
type losts_avg_fields {
  id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "losts". All fields are combined with a logical 'AND'.
"""
input losts_bool_exp {
  _and: [losts_bool_exp!]
  _not: losts_bool_exp
  _or: [losts_bool_exp!]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  location: String_comparison_exp
  photo: String_comparison_exp
  time: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "losts"
"""
enum losts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  losts_pkey
}

"""
input type for incrementing numeric columns in table "losts"
"""
input losts_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "losts"
"""
input losts_insert_input {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""aggregate max on columns"""
type losts_max_fields {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""aggregate min on columns"""
type losts_min_fields {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""
response of any mutation on the table "losts"
"""
type losts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [losts!]!
}

"""
on_conflict condition type for table "losts"
"""
input losts_on_conflict {
  constraint: losts_constraint!
  update_columns: [losts_update_column!]! = []
  where: losts_bool_exp
}

"""Ordering options when selecting data from "losts"."""
input losts_order_by {
  created_at: order_by
  description: order_by
  id: order_by
  location: order_by
  photo: order_by
  time: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""primary key columns input for table: losts"""
input losts_pk_columns_input {
  id: Int!
}

"""
select columns of table "losts"
"""
enum losts_select_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  location

  """column name"""
  photo

  """column name"""
  time

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "losts"
"""
input losts_set_input {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""aggregate stddev on columns"""
type losts_stddev_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type losts_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type losts_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
Streaming cursor of the table "losts"
"""
input losts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: losts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input losts_stream_cursor_value_input {
  created_at: timestamptz
  description: String
  id: Int
  location: String
  photo: String
  time: String
  title: String
  updated_at: timestamptz
  user_id: Int
}

"""aggregate sum on columns"""
type losts_sum_fields {
  id: Int
  user_id: Int
}

"""
update columns of table "losts"
"""
enum losts_update_column {
  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  location

  """column name"""
  photo

  """column name"""
  time

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

input losts_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: losts_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: losts_set_input

  """filter the rows which have to be updated"""
  where: losts_bool_exp!
}

"""aggregate var_pop on columns"""
type losts_var_pop_fields {
  id: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type losts_var_samp_fields {
  id: Float
  user_id: Float
}

"""aggregate variance on columns"""
type losts_variance_fields {
  id: Float
  user_id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "City"
  """
  delete_City(
    """filter the rows which have to be deleted"""
    where: City_bool_exp!
  ): City_mutation_response

  """
  delete single row from the table: "City"
  """
  delete_City_by_pk(id: Int!): City

  """
  delete data from the table: "category"
  """
  delete_category(
    """filter the rows which have to be deleted"""
    where: category_bool_exp!
  ): category_mutation_response

  """
  delete single row from the table: "category"
  """
  delete_category_by_pk(id: Int!): category

  """
  delete data from the table: "finds"
  """
  delete_finds(
    """filter the rows which have to be deleted"""
    where: finds_bool_exp!
  ): finds_mutation_response

  """
  delete single row from the table: "finds"
  """
  delete_finds_by_pk(id: Int!): finds

  """
  delete data from the table: "losts"
  """
  delete_losts(
    """filter the rows which have to be deleted"""
    where: losts_bool_exp!
  ): losts_mutation_response

  """
  delete single row from the table: "losts"
  """
  delete_losts_by_pk(id: Int!): losts

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "City"
  """
  insert_City(
    """the rows to be inserted"""
    objects: [City_insert_input!]!

    """upsert condition"""
    on_conflict: City_on_conflict
  ): City_mutation_response

  """
  insert a single row into the table: "City"
  """
  insert_City_one(
    """the row to be inserted"""
    object: City_insert_input!

    """upsert condition"""
    on_conflict: City_on_conflict
  ): City

  """
  insert data into the table: "category"
  """
  insert_category(
    """the rows to be inserted"""
    objects: [category_insert_input!]!

    """upsert condition"""
    on_conflict: category_on_conflict
  ): category_mutation_response

  """
  insert a single row into the table: "category"
  """
  insert_category_one(
    """the row to be inserted"""
    object: category_insert_input!

    """upsert condition"""
    on_conflict: category_on_conflict
  ): category

  """
  insert data into the table: "finds"
  """
  insert_finds(
    """the rows to be inserted"""
    objects: [finds_insert_input!]!

    """upsert condition"""
    on_conflict: finds_on_conflict
  ): finds_mutation_response

  """
  insert a single row into the table: "finds"
  """
  insert_finds_one(
    """the row to be inserted"""
    object: finds_insert_input!

    """upsert condition"""
    on_conflict: finds_on_conflict
  ): finds

  """
  insert data into the table: "losts"
  """
  insert_losts(
    """the rows to be inserted"""
    objects: [losts_insert_input!]!

    """upsert condition"""
    on_conflict: losts_on_conflict
  ): losts_mutation_response

  """
  insert a single row into the table: "losts"
  """
  insert_losts_one(
    """the row to be inserted"""
    object: losts_insert_input!

    """upsert condition"""
    on_conflict: losts_on_conflict
  ): losts

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "City"
  """
  update_City(
    """increments the numeric columns with given value of the filtered values"""
    _inc: City_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: City_set_input

    """filter the rows which have to be updated"""
    where: City_bool_exp!
  ): City_mutation_response

  """
  update single row of the table: "City"
  """
  update_City_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: City_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: City_set_input
    pk_columns: City_pk_columns_input!
  ): City

  """
  update multiples rows of table: "City"
  """
  update_City_many(
    """updates to execute, in order"""
    updates: [City_updates!]!
  ): [City_mutation_response]

  """
  update data of the table: "category"
  """
  update_category(
    """increments the numeric columns with given value of the filtered values"""
    _inc: category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: category_set_input

    """filter the rows which have to be updated"""
    where: category_bool_exp!
  ): category_mutation_response

  """
  update single row of the table: "category"
  """
  update_category_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: category_set_input
    pk_columns: category_pk_columns_input!
  ): category

  """
  update multiples rows of table: "category"
  """
  update_category_many(
    """updates to execute, in order"""
    updates: [category_updates!]!
  ): [category_mutation_response]

  """
  update data of the table: "finds"
  """
  update_finds(
    """increments the numeric columns with given value of the filtered values"""
    _inc: finds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: finds_set_input

    """filter the rows which have to be updated"""
    where: finds_bool_exp!
  ): finds_mutation_response

  """
  update single row of the table: "finds"
  """
  update_finds_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: finds_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: finds_set_input
    pk_columns: finds_pk_columns_input!
  ): finds

  """
  update multiples rows of table: "finds"
  """
  update_finds_many(
    """updates to execute, in order"""
    updates: [finds_updates!]!
  ): [finds_mutation_response]

  """
  update data of the table: "losts"
  """
  update_losts(
    """increments the numeric columns with given value of the filtered values"""
    _inc: losts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: losts_set_input

    """filter the rows which have to be updated"""
    where: losts_bool_exp!
  ): losts_mutation_response

  """
  update single row of the table: "losts"
  """
  update_losts_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: losts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: losts_set_input
    pk_columns: losts_pk_columns_input!
  ): losts

  """
  update multiples rows of table: "losts"
  """
  update_losts_many(
    """updates to execute, in order"""
    updates: [losts_updates!]!
  ): [losts_mutation_response]

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "City"
  """
  City(
    """distinct select on columns"""
    distinct_on: [City_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [City_order_by!]

    """filter the rows returned"""
    where: City_bool_exp
  ): [City!]!

  """
  fetch aggregated fields from the table: "City"
  """
  City_aggregate(
    """distinct select on columns"""
    distinct_on: [City_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [City_order_by!]

    """filter the rows returned"""
    where: City_bool_exp
  ): City_aggregate!

  """fetch data from the table: "City" using primary key columns"""
  City_by_pk(id: Int!): City

  """
  fetch data from the table: "category"
  """
  category(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): [category!]!

  """
  fetch aggregated fields from the table: "category"
  """
  category_aggregate(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): category_aggregate!

  """fetch data from the table: "category" using primary key columns"""
  category_by_pk(id: Int!): category

  """
  fetch data from the table: "finds"
  """
  finds(
    """distinct select on columns"""
    distinct_on: [finds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [finds_order_by!]

    """filter the rows returned"""
    where: finds_bool_exp
  ): [finds!]!

  """
  fetch aggregated fields from the table: "finds"
  """
  finds_aggregate(
    """distinct select on columns"""
    distinct_on: [finds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [finds_order_by!]

    """filter the rows returned"""
    where: finds_bool_exp
  ): finds_aggregate!

  """fetch data from the table: "finds" using primary key columns"""
  finds_by_pk(id: Int!): finds

  """
  fetch data from the table: "losts"
  """
  losts(
    """distinct select on columns"""
    distinct_on: [losts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [losts_order_by!]

    """filter the rows returned"""
    where: losts_bool_exp
  ): [losts!]!

  """
  fetch aggregated fields from the table: "losts"
  """
  losts_aggregate(
    """distinct select on columns"""
    distinct_on: [losts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [losts_order_by!]

    """filter the rows returned"""
    where: losts_bool_exp
  ): losts_aggregate!

  """fetch data from the table: "losts" using primary key columns"""
  losts_by_pk(id: Int!): losts

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

type subscription_root {
  """
  fetch data from the table: "City"
  """
  City(
    """distinct select on columns"""
    distinct_on: [City_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [City_order_by!]

    """filter the rows returned"""
    where: City_bool_exp
  ): [City!]!

  """
  fetch aggregated fields from the table: "City"
  """
  City_aggregate(
    """distinct select on columns"""
    distinct_on: [City_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [City_order_by!]

    """filter the rows returned"""
    where: City_bool_exp
  ): City_aggregate!

  """fetch data from the table: "City" using primary key columns"""
  City_by_pk(id: Int!): City

  """
  fetch data from the table in a streaming manner: "City"
  """
  City_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [City_stream_cursor_input]!

    """filter the rows returned"""
    where: City_bool_exp
  ): [City!]!

  """
  fetch data from the table: "category"
  """
  category(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): [category!]!

  """
  fetch aggregated fields from the table: "category"
  """
  category_aggregate(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): category_aggregate!

  """fetch data from the table: "category" using primary key columns"""
  category_by_pk(id: Int!): category

  """
  fetch data from the table in a streaming manner: "category"
  """
  category_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [category_stream_cursor_input]!

    """filter the rows returned"""
    where: category_bool_exp
  ): [category!]!

  """
  fetch data from the table: "finds"
  """
  finds(
    """distinct select on columns"""
    distinct_on: [finds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [finds_order_by!]

    """filter the rows returned"""
    where: finds_bool_exp
  ): [finds!]!

  """
  fetch aggregated fields from the table: "finds"
  """
  finds_aggregate(
    """distinct select on columns"""
    distinct_on: [finds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [finds_order_by!]

    """filter the rows returned"""
    where: finds_bool_exp
  ): finds_aggregate!

  """fetch data from the table: "finds" using primary key columns"""
  finds_by_pk(id: Int!): finds

  """
  fetch data from the table in a streaming manner: "finds"
  """
  finds_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [finds_stream_cursor_input]!

    """filter the rows returned"""
    where: finds_bool_exp
  ): [finds!]!

  """
  fetch data from the table: "losts"
  """
  losts(
    """distinct select on columns"""
    distinct_on: [losts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [losts_order_by!]

    """filter the rows returned"""
    where: losts_bool_exp
  ): [losts!]!

  """
  fetch aggregated fields from the table: "losts"
  """
  losts_aggregate(
    """distinct select on columns"""
    distinct_on: [losts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [losts_order_by!]

    """filter the rows returned"""
    where: losts_bool_exp
  ): losts_aggregate!

  """fetch data from the table: "losts" using primary key columns"""
  losts_by_pk(id: Int!): losts

  """
  fetch data from the table in a streaming manner: "losts"
  """
  losts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [losts_stream_cursor_input]!

    """filter the rows returned"""
    where: losts_bool_exp
  ): [losts!]!

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users

  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""Users table"""
type users {
  email: String!
  first_name: String!
  id: Int!
  last_name: String!
  password: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""aggregate avg on columns"""
type users_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  email: String_comparison_exp
  first_name: String_comparison_exp
  id: Int_comparison_exp
  last_name: String_comparison_exp
  password: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  users_email_key

  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  email: String
  first_name: String
  id: Int
  last_name: String
  password: String
}

"""aggregate max on columns"""
type users_max_fields {
  email: String
  first_name: String
  id: Int
  last_name: String
  password: String
}

"""aggregate min on columns"""
type users_min_fields {
  email: String
  first_name: String
  id: Int
  last_name: String
  password: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  email: order_by
  first_name: order_by
  id: order_by
  last_name: order_by
  password: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  email

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  password
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  email: String
  first_name: String
  id: Int
  last_name: String
  password: String
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  email: String
  first_name: String
  id: Int
  last_name: String
  password: String
}

"""aggregate sum on columns"""
type users_sum_fields {
  id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  email

  """column name"""
  first_name

  """column name"""
  id

  """column name"""
  last_name

  """column name"""
  password
}

input users_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: users_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input

  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  id: Float
}

